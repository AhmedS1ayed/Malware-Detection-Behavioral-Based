"""import re
import time
import os
count =0
last_value = 0
current_value = 0

while(1) :
	maps_file = open("/proc/91697/maps")
	flag =0
	for line in maps_file.readlines():  # for each mapped region
	    if line.find('[heap]') > 0 or flag == 1:
	    	flag=1
	    	if (line.find('[') > 0 or line.find('/') > 0 )  and not (line.find('[heap]') > 0) :
	    		flag =0
	    		continue
	    	print(line)
	    	m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r])', line)
	    	start = int(m.group(1), 16)
	    	end = int(m.group(2), 16)
	    	current_value+= (end-start) /(1024*1024)
	    	print( (end-start) /(1024*1024) , 'MB')
	if abs(current_value - last_value) > 200 :
		count+=1
	if count>=3 :
		print('ALERT')
		os.kill(91697, 9)
	last_value=current_value
	current_value=0
	time.sleep(10)
    	
maps_file.close()"""

import psutil
import re
import time
import os

def heap_size(pid):
	maps_file = open("/proc/"+str(processID)+"/maps")
	current_value=0
	flag =0
	for line in maps_file.readlines():  # for each mapped region
		if line.find('[heap]') > 0 or flag == 1:
			flag=1
		if (line.find('[') > 0 or line.find('/') > 0 )  and not (line.find('[heap]') > 0) :
			flag =0
			continue
		m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r])', line)
		start = int(m.group(1), 16)
		end = int(m.group(2), 16)
		current_value+= (end-start) /(1024*1024)
	return current_value

pids={}
# Iterate over all running process

while(1) :
	for proc in psutil.process_iter():
		try:
			# Get processs pid from process object.
			processID = proc.pid
			if processID not in pids :
				#push the new process into the array with its current heap size
				pids[processID] = [heap_size(processID),0,0]
			else :
				pids[processID][1] = pids[processID][0]
				pids[processID][0] = heap_size(processID)

			current_value = pids[processID][0]
			last_value = pids[processID][1]
			if abs(current_value - last_value) > 200 :
				pids[processID][2]+=1
			elif count > 0 : #this condition means that pattern didn't happen consequently
				count = 0

			if pids[processID][2] > 3 :
				print("pattern found and killed")
				os.kill(processID, 9)
			
			
		except (PermissionError , psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
			pass

	time.sleep(10)
